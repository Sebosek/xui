/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  size,
} from './components/avatar/avatar.size';
import {
  state,
} from './components/shared/state';
import {
  type,
} from './components/callout/callout.type';
import {
  state as state1,
} from './components/callout/callout.state';
import {
  gutter,
} from './components/grid/grid.gutter';
import {
  cols,
} from './components/grid/grid.column.cols';

export namespace Components {
  interface BugComponent {}
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface XuiAvatar {
    /**
    * Sets avatar initials. The value is trimmed to two characters in total.
    */
    'initials': string;
    /**
    * Sets an avatar size.
    */
    'size': size;
    /**
    * Sets the source for async image loading. With every change, the image is asynchronously loaded.
    */
    'src': string;
  }
  interface XuiButton {
    'disabled': boolean;
    'ghost': boolean;
    'state': state;
    'text': string;
    'type': 'default' | 'primary' | 'danger';
  }
  interface XuiCallout {
    'closeable': boolean;
    'destroy': () => Promise<void>;
    'state': state;
    'timeout': number;
    'type': type | null;
  }
  interface XuiCaption {
    'type': 'info' | 'success' | 'question' | 'error';
  }
  interface XuiCheckbox {
    'checked': boolean;
    'disabled': boolean;
    'intermediate': boolean;
    'name': string;
    'state': state;
    'tabindex': number;
    'value': string | number;
  }
  interface XuiColor {
    'color': string;
    'steps': number;
  }
  interface XuiFormControl {}
  interface XuiFormItem {}
  interface XuiGrid {
    'gutter': gutter | undefined;
  }
  interface XuiGridColumn {
    /**
    * Defines general column width
    * @type {cols}
    */
    'cols': cols | undefined;
    /**
    * Defines column pulling
    * @type {cols}
    */
    'pull': cols | undefined;
    /**
    * Defines column pushing
    * @type {cols}
    */
    'push': cols | undefined;
  }
  interface XuiInput {
    'disabled': boolean;
    'name': string;
    'placeholder': string;
    'prefixes': Array<(input: HTMLXuiInputElement) => HTMLElement>;
    'state': state;
    'suffixes': Array<(input: HTMLXuiInputElement) => HTMLElement>;
    'type': string;
    'value': string | number;
  }
  interface XuiLabel {}
  interface XuiLink {
    'href': string;
    'target': string;
  }
  interface XuiLoading {
    'size': 12 | 24 | 32;
  }
  interface XuiMenu {}
  interface XuiMenuItem {
    'defaultCursor': boolean;
  }
  interface XuiOverElement {
    'multipleClicks': boolean;
    'offclickCloses': boolean;
    'state': 'shown' | 'hidden';
  }
  interface XuiPassword {
    'disabled': boolean;
    'name': string;
    'placeholder': string;
    'readable': boolean;
    'value': string | number;
  }
  interface XuiPopover {
    'direction': 'top' | 'left' | 'bottom' | 'right' | 'none';
    'title': string;
  }
  interface XuiRadio {
    'checked': boolean;
    'disabled': boolean;
    'name': string;
    'state': state;
    'tabindex': number;
    'value': string | number | null;
  }
  interface XuiTabItem {
    'key': string;
    'title': string;
  }
  interface XuiTabs {
    'activeTab': string;
  }
  interface XuiText {}
  interface XuiToggle {
    'disabled': boolean;
    'switched': boolean;
  }
  interface XuiTooltip {
    'text': string;
  }
}

declare global {


  interface HTMLBugComponentElement extends Components.BugComponent, HTMLStencilElement {}
  var HTMLBugComponentElement: {
    prototype: HTMLBugComponentElement;
    new (): HTMLBugComponentElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLXuiAvatarElement extends Components.XuiAvatar, HTMLStencilElement {}
  var HTMLXuiAvatarElement: {
    prototype: HTMLXuiAvatarElement;
    new (): HTMLXuiAvatarElement;
  };

  interface HTMLXuiButtonElement extends Components.XuiButton, HTMLStencilElement {}
  var HTMLXuiButtonElement: {
    prototype: HTMLXuiButtonElement;
    new (): HTMLXuiButtonElement;
  };

  interface HTMLXuiCalloutElement extends Components.XuiCallout, HTMLStencilElement {}
  var HTMLXuiCalloutElement: {
    prototype: HTMLXuiCalloutElement;
    new (): HTMLXuiCalloutElement;
  };

  interface HTMLXuiCaptionElement extends Components.XuiCaption, HTMLStencilElement {}
  var HTMLXuiCaptionElement: {
    prototype: HTMLXuiCaptionElement;
    new (): HTMLXuiCaptionElement;
  };

  interface HTMLXuiCheckboxElement extends Components.XuiCheckbox, HTMLStencilElement {}
  var HTMLXuiCheckboxElement: {
    prototype: HTMLXuiCheckboxElement;
    new (): HTMLXuiCheckboxElement;
  };

  interface HTMLXuiColorElement extends Components.XuiColor, HTMLStencilElement {}
  var HTMLXuiColorElement: {
    prototype: HTMLXuiColorElement;
    new (): HTMLXuiColorElement;
  };

  interface HTMLXuiFormControlElement extends Components.XuiFormControl, HTMLStencilElement {}
  var HTMLXuiFormControlElement: {
    prototype: HTMLXuiFormControlElement;
    new (): HTMLXuiFormControlElement;
  };

  interface HTMLXuiFormItemElement extends Components.XuiFormItem, HTMLStencilElement {}
  var HTMLXuiFormItemElement: {
    prototype: HTMLXuiFormItemElement;
    new (): HTMLXuiFormItemElement;
  };

  interface HTMLXuiGridElement extends Components.XuiGrid, HTMLStencilElement {}
  var HTMLXuiGridElement: {
    prototype: HTMLXuiGridElement;
    new (): HTMLXuiGridElement;
  };

  interface HTMLXuiGridColumnElement extends Components.XuiGridColumn, HTMLStencilElement {}
  var HTMLXuiGridColumnElement: {
    prototype: HTMLXuiGridColumnElement;
    new (): HTMLXuiGridColumnElement;
  };

  interface HTMLXuiInputElement extends Components.XuiInput, HTMLStencilElement {}
  var HTMLXuiInputElement: {
    prototype: HTMLXuiInputElement;
    new (): HTMLXuiInputElement;
  };

  interface HTMLXuiLabelElement extends Components.XuiLabel, HTMLStencilElement {}
  var HTMLXuiLabelElement: {
    prototype: HTMLXuiLabelElement;
    new (): HTMLXuiLabelElement;
  };

  interface HTMLXuiLinkElement extends Components.XuiLink, HTMLStencilElement {}
  var HTMLXuiLinkElement: {
    prototype: HTMLXuiLinkElement;
    new (): HTMLXuiLinkElement;
  };

  interface HTMLXuiLoadingElement extends Components.XuiLoading, HTMLStencilElement {}
  var HTMLXuiLoadingElement: {
    prototype: HTMLXuiLoadingElement;
    new (): HTMLXuiLoadingElement;
  };

  interface HTMLXuiMenuElement extends Components.XuiMenu, HTMLStencilElement {}
  var HTMLXuiMenuElement: {
    prototype: HTMLXuiMenuElement;
    new (): HTMLXuiMenuElement;
  };

  interface HTMLXuiMenuItemElement extends Components.XuiMenuItem, HTMLStencilElement {}
  var HTMLXuiMenuItemElement: {
    prototype: HTMLXuiMenuItemElement;
    new (): HTMLXuiMenuItemElement;
  };

  interface HTMLXuiOverElementElement extends Components.XuiOverElement, HTMLStencilElement {}
  var HTMLXuiOverElementElement: {
    prototype: HTMLXuiOverElementElement;
    new (): HTMLXuiOverElementElement;
  };

  interface HTMLXuiPasswordElement extends Components.XuiPassword, HTMLStencilElement {}
  var HTMLXuiPasswordElement: {
    prototype: HTMLXuiPasswordElement;
    new (): HTMLXuiPasswordElement;
  };

  interface HTMLXuiPopoverElement extends Components.XuiPopover, HTMLStencilElement {}
  var HTMLXuiPopoverElement: {
    prototype: HTMLXuiPopoverElement;
    new (): HTMLXuiPopoverElement;
  };

  interface HTMLXuiRadioElement extends Components.XuiRadio, HTMLStencilElement {}
  var HTMLXuiRadioElement: {
    prototype: HTMLXuiRadioElement;
    new (): HTMLXuiRadioElement;
  };

  interface HTMLXuiTabItemElement extends Components.XuiTabItem, HTMLStencilElement {}
  var HTMLXuiTabItemElement: {
    prototype: HTMLXuiTabItemElement;
    new (): HTMLXuiTabItemElement;
  };

  interface HTMLXuiTabsElement extends Components.XuiTabs, HTMLStencilElement {}
  var HTMLXuiTabsElement: {
    prototype: HTMLXuiTabsElement;
    new (): HTMLXuiTabsElement;
  };

  interface HTMLXuiTextElement extends Components.XuiText, HTMLStencilElement {}
  var HTMLXuiTextElement: {
    prototype: HTMLXuiTextElement;
    new (): HTMLXuiTextElement;
  };

  interface HTMLXuiToggleElement extends Components.XuiToggle, HTMLStencilElement {}
  var HTMLXuiToggleElement: {
    prototype: HTMLXuiToggleElement;
    new (): HTMLXuiToggleElement;
  };

  interface HTMLXuiTooltipElement extends Components.XuiTooltip, HTMLStencilElement {}
  var HTMLXuiTooltipElement: {
    prototype: HTMLXuiTooltipElement;
    new (): HTMLXuiTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'bug-component': HTMLBugComponentElement;
    'my-component': HTMLMyComponentElement;
    'xui-avatar': HTMLXuiAvatarElement;
    'xui-button': HTMLXuiButtonElement;
    'xui-callout': HTMLXuiCalloutElement;
    'xui-caption': HTMLXuiCaptionElement;
    'xui-checkbox': HTMLXuiCheckboxElement;
    'xui-color': HTMLXuiColorElement;
    'xui-form-control': HTMLXuiFormControlElement;
    'xui-form-item': HTMLXuiFormItemElement;
    'xui-grid': HTMLXuiGridElement;
    'xui-grid-column': HTMLXuiGridColumnElement;
    'xui-input': HTMLXuiInputElement;
    'xui-label': HTMLXuiLabelElement;
    'xui-link': HTMLXuiLinkElement;
    'xui-loading': HTMLXuiLoadingElement;
    'xui-menu': HTMLXuiMenuElement;
    'xui-menu-item': HTMLXuiMenuItemElement;
    'xui-over-element': HTMLXuiOverElementElement;
    'xui-password': HTMLXuiPasswordElement;
    'xui-popover': HTMLXuiPopoverElement;
    'xui-radio': HTMLXuiRadioElement;
    'xui-tab-item': HTMLXuiTabItemElement;
    'xui-tabs': HTMLXuiTabsElement;
    'xui-text': HTMLXuiTextElement;
    'xui-toggle': HTMLXuiToggleElement;
    'xui-tooltip': HTMLXuiTooltipElement;
  }
}

declare namespace LocalJSX {
  interface BugComponent extends JSXBase.HTMLAttributes<HTMLBugComponentElement> {}
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface XuiAvatar extends JSXBase.HTMLAttributes<HTMLXuiAvatarElement> {
    /**
    * Sets avatar initials. The value is trimmed to two characters in total.
    */
    'initials'?: string;
    /**
    * An event is emitted if async loading fails.
    */
    'onLoading-error'?: (event: CustomEvent<any>) => void;
    /**
    * Sets an avatar size.
    */
    'size'?: size;
    /**
    * Sets the source for async image loading. With every change, the image is asynchronously loaded.
    */
    'src'?: string;
  }
  interface XuiButton extends JSXBase.HTMLAttributes<HTMLXuiButtonElement> {
    'disabled'?: boolean;
    'ghost'?: boolean;
    'state'?: state;
    'text'?: string;
    'type'?: 'default' | 'primary' | 'danger';
  }
  interface XuiCallout extends JSXBase.HTMLAttributes<HTMLXuiCalloutElement> {
    'closeable'?: boolean;
    'state'?: state;
    'timeout'?: number;
    'type'?: type | null;
  }
  interface XuiCaption extends JSXBase.HTMLAttributes<HTMLXuiCaptionElement> {
    'type'?: 'info' | 'success' | 'question' | 'error';
  }
  interface XuiCheckbox extends JSXBase.HTMLAttributes<HTMLXuiCheckboxElement> {
    'checked'?: boolean;
    'disabled'?: boolean;
    'intermediate'?: boolean;
    'name'?: string;
    'onChanged'?: (event: CustomEvent<string | number | boolean>) => void;
    'state'?: state;
    'tabindex'?: number;
    'value'?: string | number;
  }
  interface XuiColor extends JSXBase.HTMLAttributes<HTMLXuiColorElement> {
    'color'?: string;
    'steps'?: number;
  }
  interface XuiFormControl extends JSXBase.HTMLAttributes<HTMLXuiFormControlElement> {}
  interface XuiFormItem extends JSXBase.HTMLAttributes<HTMLXuiFormItemElement> {}
  interface XuiGrid extends JSXBase.HTMLAttributes<HTMLXuiGridElement> {
    'gutter'?: gutter | undefined;
  }
  interface XuiGridColumn extends JSXBase.HTMLAttributes<HTMLXuiGridColumnElement> {
    /**
    * Defines general column width
    * @type {cols}
    */
    'cols'?: cols | undefined;
    /**
    * Defines column pulling
    * @type {cols}
    */
    'pull'?: cols | undefined;
    /**
    * Defines column pushing
    * @type {cols}
    */
    'push'?: cols | undefined;
  }
  interface XuiInput extends JSXBase.HTMLAttributes<HTMLXuiInputElement> {
    'disabled'?: boolean;
    'name'?: string;
    'placeholder'?: string;
    'prefixes'?: Array<(input: HTMLXuiInputElement) => HTMLElement>;
    'state'?: state;
    'suffixes'?: Array<(input: HTMLXuiInputElement) => HTMLElement>;
    'type'?: string;
    'value'?: string | number;
  }
  interface XuiLabel extends JSXBase.HTMLAttributes<HTMLXuiLabelElement> {}
  interface XuiLink extends JSXBase.HTMLAttributes<HTMLXuiLinkElement> {
    'href'?: string;
    'target'?: string;
  }
  interface XuiLoading extends JSXBase.HTMLAttributes<HTMLXuiLoadingElement> {
    'size'?: 12 | 24 | 32;
  }
  interface XuiMenu extends JSXBase.HTMLAttributes<HTMLXuiMenuElement> {}
  interface XuiMenuItem extends JSXBase.HTMLAttributes<HTMLXuiMenuItemElement> {
    'defaultCursor'?: boolean;
  }
  interface XuiOverElement extends JSXBase.HTMLAttributes<HTMLXuiOverElementElement> {
    'multipleClicks'?: boolean;
    'offclickCloses'?: boolean;
    'state'?: 'shown' | 'hidden';
  }
  interface XuiPassword extends JSXBase.HTMLAttributes<HTMLXuiPasswordElement> {
    'disabled'?: boolean;
    'name'?: string;
    'placeholder'?: string;
    'readable'?: boolean;
    'value'?: string | number;
  }
  interface XuiPopover extends JSXBase.HTMLAttributes<HTMLXuiPopoverElement> {
    'direction'?: 'top' | 'left' | 'bottom' | 'right' | 'none';
    'title'?: string;
  }
  interface XuiRadio extends JSXBase.HTMLAttributes<HTMLXuiRadioElement> {
    'checked'?: boolean;
    'disabled'?: boolean;
    'name'?: string;
    'onSelected'?: (event: CustomEvent<void | string | number>) => void;
    'state'?: state;
    'tabindex'?: number;
    'value'?: string | number | null;
  }
  interface XuiTabItem extends JSXBase.HTMLAttributes<HTMLXuiTabItemElement> {
    'key'?: string;
    'title'?: string;
  }
  interface XuiTabs extends JSXBase.HTMLAttributes<HTMLXuiTabsElement> {
    'activeTab'?: string;
  }
  interface XuiText extends JSXBase.HTMLAttributes<HTMLXuiTextElement> {}
  interface XuiToggle extends JSXBase.HTMLAttributes<HTMLXuiToggleElement> {
    'disabled'?: boolean;
    'onChanged'?: (event: CustomEvent<boolean>) => void;
    'switched'?: boolean;
  }
  interface XuiTooltip extends JSXBase.HTMLAttributes<HTMLXuiTooltipElement> {
    'text'?: string;
  }

  interface IntrinsicElements {
    'bug-component': BugComponent;
    'my-component': MyComponent;
    'xui-avatar': XuiAvatar;
    'xui-button': XuiButton;
    'xui-callout': XuiCallout;
    'xui-caption': XuiCaption;
    'xui-checkbox': XuiCheckbox;
    'xui-color': XuiColor;
    'xui-form-control': XuiFormControl;
    'xui-form-item': XuiFormItem;
    'xui-grid': XuiGrid;
    'xui-grid-column': XuiGridColumn;
    'xui-input': XuiInput;
    'xui-label': XuiLabel;
    'xui-link': XuiLink;
    'xui-loading': XuiLoading;
    'xui-menu': XuiMenu;
    'xui-menu-item': XuiMenuItem;
    'xui-over-element': XuiOverElement;
    'xui-password': XuiPassword;
    'xui-popover': XuiPopover;
    'xui-radio': XuiRadio;
    'xui-tab-item': XuiTabItem;
    'xui-tabs': XuiTabs;
    'xui-text': XuiText;
    'xui-toggle': XuiToggle;
    'xui-tooltip': XuiTooltip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


